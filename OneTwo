%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% all rights reserved
% Author: Dr. Ian Howard
% Associate Professor (Senior Lecturer) in Computational Neuroscience
% Centre for Robotics and Neural Systems
% Plymouth University
% A324 Portland Square
% PL4 8AA
% Plymouth, Devon, UK
% howardlab.com
% 10/02/2019
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% calculate non-linear Arduino suitable simulation of uncontrolled inverted pendulum

close all
clear all
clc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% consider equation
% d2theta/dt2 - a1*dtheta/dt -a2*theta + b0* ndu/dt + b1*u
% this equation captures the dynamics of the inverted pendulum 
% dummy values set here are for demo only
m = 0.314;
l = 0.640;
g = 9.810;
I = 0.001;
u = 0.0500;


b0=(m*l)/(I+m*l^2);
b1= 0;
a0= 1;
a1= u/(I+m*l^2);
a2=(-m*g*l)/(I+m*l^2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% setup time points
dt =  0.0400;
Tfinal = 5;
t = 0:dt:Tfinal;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% build linearized state space matrices from differential equation
% for velocity control
% % get inverted configuation
A = [0 1; -a2 -a1;];     % we dont use A here
B = [b0; (b1-a1*b0);];     % we dont use B here
C = [1 0;];
D = 0;
K = [];     % we dont use K here
A_Inv=[0 1; -a2 -a1];
PX = 20 *[-1 -1.2];
L = place(A, C', PX);
disp ('Feedback Gain Vector (L)')
disp (L)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
titleMessage = 'Example Uncontrolled Inverted Pendulum: xxxYourIDHerexxx';
disp(titleMessage)

% initialize arrays
xData = [];
yData=[];
tData=[];
kickFlag=[];

% for sub-loop runs
runs = 2;
for kick=1:runs
        
    % for each run randomly perturb intial condition
    x0 = [0; 1 * (rand - 0.5); ];
    
    % run Euler integration
    [y, t, x] = StateSpaceIntegrator(@CBNLVCPend, a1, a2, b0, C, D, L, t, x0);
    
    % get time
    newTime = (kick-1) * t(end) + t;
    
    % just show kick arrow for short time after kick
    frames = length(t);
    kickFlagL = zeros(1,frames);
    if(x0(2) > 0)
        % scale arrow to size of kick
        kickFlagL(1: floor(frames/4)) = -abs(x0(2));
    else
        % scale arrow to size of kick
        kickFlagL(1: floor(frames/4)) = abs(x0(2));
    end
    
    % concatenate data between runs
    tData = [tData newTime];
    yData = [yData y];
    xData = [xData x];
    kickFlag = [kickFlag kickFlagL];
end

% plot out the state variables
PlotStateVariable2x2(xData, tData, titleMessage);

% for all time point animate the results
figure
range=1;

% cart not moving so set distance to zero
distance = zeros( size(yData));

% use animate function
AnimatePendulumCart( (yData + pi),  distance, 0.6, tData, range, kickFlag, titleMessage);
